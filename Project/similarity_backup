private function googleSimilarityDistance() {
        $url = "https://www.googleapis.com/customsearch/v1?key=AIzaSyC8KhqZYkRXdKhaUvz67B7IGRzMjzo5lsc&cx=013707050272249182185:ldylhbskn0a&q=iPhone&alt=json";

        $response = $this->sendExternalRequest($url);

        $node1Result = json_decode($response);

        print_r($node1Result);
    }



private function googleSimilarityDistance() {
        $url = "https://www.googleapis.com/customsearch/v1?key=AIzaSyC8KhqZYkRXdKhaUvz67B7IGRzMjzo5lsc&cx=013707050272249182185:ldylhbskn0a&q=IPhone_software&alt=json";

        $response = json_decode($this->sendExternalRequest($url), true);;

        $countLinkA = $response["queries"]["request"][0]['totalResults'];
        
        echo("iPhone: ");
        print_r($countLinkA);
  
        $url2 = "https://www.googleapis.com/customsearch/v1?key=AIzaSyC8KhqZYkRXdKhaUvz67B7IGRzMjzo5lsc&cx=013707050272249182185:ldylhbskn0a&q=IOS&alt=json";

        $response = json_decode($this->sendExternalRequest($url), true);;
        
        echo("\n IOS: ");
        $countLinkB = $response["queries"]["request"][0]['totalResults'];
        print_r($countLinkB);
        
        
        echo("\n \n Calc: ");
        
        for ($i = 0; $i < count($aLinksA); $i++) {

            if (in_array($aLinksA[$i], $aLinksB) && !in_array($aLinksA[$i], $combindedCats)) {
                array_push($combindedCats, $aLinksA[$i]);
                $intersection++;
            }
        }

        for ($i = 0; $i < count($aLinksB); $i++) {

            if (in_array($aLinksB[$i], $aLinksA) && !in_array($aLinksB[$i], $combindedCats)) {

                array_push($combindedCats, $aLinksB[$i]);
                $intersection++;
            }
        }
        
        $a = log(count($countLinkA));
        $b = log(count($countLinkB));
        $ab = log($intersection);

        $googleMeasure = (max($a, $b) - $ab) / ((count($aLinksA) + count($aLinksB)) - min($a, $b));
        
        echo("\n Meins: ");
        
        $meins = $this->dbpediaSimilarityCheck("IOS", "IPhone_software");
        print_r($meins);
        die();
    }

private function wikipediaMiningSimilarity($term1, $term2) {
        $similarity = 0.0;

        $term1 = $this->cleaningTermsForWikipediaMining($term1);
        $term2 = $this->cleaningTermsForWikipediaMining($term2);
        $term1 = $this->wikipediaAPI->searchForTerm($term1);

        $categoryName1 = urlencode($term1);
        $categoryName2 = urlencode($term2);
        $url = "http://wdm.cs.waikato.ac.nz/services/compare?term1=" . $categoryName1 . "&term2=" . $categoryName2 . "&responseFormat=xml&disambiguationDetails&connections";

        $response = $this->sendExternalRequest($url);

        $xmlobj = new SimpleXMLElement($response);

        if (($xmlobj->attributes()->error) != null) {

            $unknownTerm = (string) $xmlobj->attributes()->unknownTerm;
            $newTerm = (string) $this->wikipediaAPI->searchForTerm($unknownTerm);

            $newTerm = urlencode($newTerm);

            if ($newTerm == null) {
                echo("\n ERROR NO TERM FOUND!!! \n");
                print_r($unknownTerm);
                return array("error" => "unknown Term", "term" => $unknownTerm);
            }

            $url = "http://wdm.cs.waikato.ac.nz/services/compare?term1=" . $categoryName1 . "&term2=" . $newTerm . "&responseFormat=xml&disambiguationDetails&connections";

            $response = $this->sendExternalRequest($url);

            $xmlobj = new SimpleXMLElement($response);
            if (($xmlobj->attributes()->error) != null) {
                echo("\n ERROR NO TERM FOUND!!! \n");

                return array("error" => "unknown Term", "term" => $unknownTerm);
            }
        }
        $similarity = (float) $xmlobj->attributes()->relatedness;

        $connections = $xmlobj->xpath("//connection");

        foreach ($connections as $connection) {
            $connectionTitle = $connection->attributes()->title;
            $relatednessTerm1 = $connection->attributes()->relatedness1;
            $relatednessTerm2 = $connection->attributes()->relatedness2;
        }
        return $similarity;
    }

private function lookForDBpediaTerm($term) {
        try {
            $query = 'SELECT DISTINCT * WHERE { <http://dbpedia.org/resource/' . $term . '_(disambiguation)> <http://dbpedia.org/ontology/wikiPageDisambiguates> ?y .
<http://dbpedia.org/resource/' . $term . '> <http://dbpedia.org/ontology/wikiPageRedirects> ?x .
    }';

            $searchUrl = "http://dbpedia.org/sparql?query=" . urlencode($query) . "&format=xml";

            $categories = $this->sendExternalRequest($searchUrl);
            $result = array();
            foreach ($categories['results']['bindings'] as $entry) {
                $category = $entry['x']['value'];

                array_push($result, $category);
            }

            print_r($categories);
            return $result;
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }

    private function getLink($term) {
        try {


            $searchUrl = "https://en.wikipedia.org/w/api.php?action=query&prop=extlinks&format=xml&titles=" . $term;

            print_r($searchUrl);
            $categories = json_decode($this->sendExternalRequest($searchUrl), true);
            print_r($categories);

            $categoriesArray = array();


            foreach ($categories['results']['bindings'] as $entry) {
                $category = $entry['x']['value'];

                //$category = $this->cleaningTerm($category);

                array_push($categoriesArray, $category);

                //$array = array($category);
                // $this->iterative_search_for_categories($array, null, $keyword);
            }


            die("links");
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }

    private function ownSimilarityFunctionWithCategories($termA, $termB) {

        if ($termA == $termB)
            return 1;

        $aLinksA = $this->getCategoriesOfArticle($termA);
        $aLinksB = $this->getCategoriesOfCategory($termB);



        for ($i = 0; $i < 3; $i++) {

            $categories = $this->getCategoriesOfCategory($aLinksA[$i]);

            foreach ($categories as $category) {
                array_push($aLinksA, $category);

                $subcategories = $this->getCategoriesOfCategory($category);

                foreach ($subcategories as $subcategory) {
                    array_push($aLinksA, $subcategory);
                }
            }
        }


        for ($i = 0; $i < 3; $i++) {

            $categories = $this->getCategoriesOfCategory($aLinksB[$i]);

            foreach ($categories as $category) {
                array_push($aLinksB, $category);

                $subcategories = $this->getCategoriesOfCategory($category);

                foreach ($subcategories as $subcategory) {
                    array_push($aLinksB, $subcategory);
                }
            }
        }


        //we can't do anything if there are no links
        if (count($aLinksA) == 0 || count($aLinksB) == 0)
            return "null";


        $intersection = 0;
        $union = 0;
        $indexA = 0;
        $indexB = 0;


        while ($indexA < count($aLinksA) || $indexB < count($aLinksB)) {

            //identify which links to use (A, B, or both)
            $useA = false;
            $useB = false;

            $linkA = null;
            $linkB = null;

            if ($indexA < count($aLinksA))
                $linkA = $aLinksA[$indexA];

            if ($indexB < count($aLinksB))
                $linkB = $aLinksB[$indexB];


            if ($linkA != null && $linkB != null && ($linkA == $linkB)) {
                $useA = true;
                $useB = true;
                // $linkArt = new Article(wikipedia . getEnvironment(), linkA);
                $intersection++;
            } else {
                if ($linkA != null && ($linkB == null || $linkA == $linkB)) {
                    $useA = true;
                    //$linkArt = new Article(wikipedia . getEnvironment(), linkA);

                    if ($linkA == $linkB) {
                        $intersection++;
                    }
                } else {
                    $useB = true;
                    //$linkArt = new Article(wikipedia . getEnvironment(), linkB);

                    if ($linkB == $linkA) {
                        $intersection++;
                    }
                }
            }
            $union++;

            if ($useA)
                $indexA++;
            if ($useB)
                $indexB++;
        }


        //calculate google distance inspired measure
        $googleMeasure = null;

        if ($intersection == 0) {
            $googleMeasure = 1.0;
        } else {
            $a = log(count($aLinksA));
            $b = log(count($aLinksB));
            $ab = log($intersection);

            $googleMeasure = (max($a, $b) - $ab) / ($m - min($a, $b));
        }

        print_r($googleMeasure);
        die();

        return $this->normalizeGoogleMeasure(googleMeasure);
    }

    public function getCategoriesOfArticle($keyword) {

        $this->cleaningCategoryTerm($keyword);
        try {
            $query = 'SELECT DISTINCT * WHERE {
                <http://dbpedia.org/resource/' . $keyword . '>
                    <http://purl.org/dc/terms/subject>
                    ?x
                    }';

            $searchUrl = "http://dbpedia.org/sparql?query=" . urlencode($query);

            $categories = json_decode($this->sendExternalRequest($searchUrl), true);
            $result = array();
            foreach ($categories['results']['bindings'] as $entry) {
                $category = $entry['x']['value'];

                array_push($result, $category);
            }
            return $result;
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }



public function callWikipediaMiningForKeywordInformation($keyword) {


        try {

            //$categories = $this->callDBpediaWithSparql($keyword);

            $categories = $this->wikipediaAPI->getArticleDetails($keyword);

            //$this->graph = array();

            $bestNode = $this->getBestNode($keyword, $categories);

            $this->iterative_search_for_categories($bestNode, null, $keyword);

            echo("...GRAPH...");
            print_r($this->graph);
            die("getCategoriesOfArticle");
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }

    public function getCategoryDetails($term) {


        try {
            $term = urlencode($term);
            $searchUrl = "http://wdm.cs.waikato.ac.nz/services/exploreCategory?title=" . $term . "&labels=true&parentCategories=true&responseFormat=xml";

            $response = $this->sendExternalRequest($searchUrl);

            $xmlobj = new SimpleXMLElement($response);

            $tmp = array(($xmlobj->xpath("/message")));

            $categories = array();
            foreach ($tmp[0] as $obj) {

                if ($obj->xpath("//parentCategory") != null) {
                    $parentCategories = $obj->xpath("//parentCategory");
                    foreach ($parentCategories as $item) {
                        array_push($categories, (string) $item->attributes()->title);
                    }
                }
            }
            return($categories);
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }

    public function getArticleDetails($term) {
        try {
            $term = urlencode($term);
            $searchUrl = "http://wdm.cs.waikato.ac.nz/services/exploreArticle?title=" . $term . "&labels=true&parentCategories=true&responseFormat=xml";


            $response = $this->sendExternalRequest($searchUrl);

            $xmlobj = new SimpleXMLElement($response);

            $tmp = array(($xmlobj->xpath("/message")));

            $categories = array();
            foreach ($tmp[0] as $obj) {

                if ($obj->xpath("//parentCategory") != null) {
                    $parentCategories = $obj->xpath("//parentCategory");
                    foreach ($parentCategories as $item) {
                        array_push($categories, (string) $item->attributes()->title);
                    }
                }
            }

            return($categories);
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }