public function selectFeedsForUser($concepts) {

        $q = self::PREFIX_EX . ' ' .
                self::PREFIX_OX . ' ' .
                self::PREFIX_RDF . ' ' .
                'SELECT DISTINCT *
                    WHERE
                    {
                        ?feed rdf:type ex:FeedURI .
                        ?concept rdf:type ex:Concept .
                        ?concept ex:hasName ?name .
                        ?concept ex:hasConnectionToFeed ?feed . ';


        $last = end($concepts);
        $q .= ' FILTER (';
        foreach ($concepts as $concept) {
            $q .= ' ?name = "' . $concept['name'] . '"';
            if ($last['name'] == $concept['name']) {
                $q .= ' ) ';
            } else {
                $q .= ' || ';
            }
        }
//for subquery:  GROUP BY ?feed ORDER BY DESC(xsd:integer(?count))
        $q .= '}  LIMIT 25';

        /*
          (COUNT(?connection) as ?weight)
          ORDER BY DESC(xsd:integer(?weight))
         */

        if ($errs = $this->arc_store->getErrors()) {
            print_r($errs);
            return '{"response": [{ "function":"selectFeedQuery" ,"message":"Error in SELECT", "error:"' . $errs . '}]}';
        }

        $feeds = array();
        if ($rows = $this->arc_store->query($q, 'rows')) {

            foreach ($rows as $row) {
  /*               $subQ = self::PREFIX_EX . ' ' .
                        self::PREFIX_OX . ' ' .
                        self::PREFIX_RDF . ' ' .
                        'SELECT DISTINCT *
                        WHERE
                        {
                            ?concept2 rdf:type ex:Concept .
                            ?concept2 ex:hasName ?name2 .
                            ?concept2 ex:hasConnectionWeight ?weight .
                            ?concept2 ex:hasConnectionToFeed <'. $row['feed'].'> . 
                                
                        } GROUP BY ?concept2 ORDER BY DESC(xsd:integer(?weight)) LIMIT 25';

                if ($subErrs = $this->arc_store->getErrors()) {
                    print_r($subErrs);
                    return '{"response": [{ "function":"selectFeedQuery" ,"message":"Error in SELECT", "error:"' . $errs . '}]}';
                }
               $concepts = array();
 
                if ($subRows = $this->arc_store->query($subQ, 'rows')) {
                    
                    foreach ($subRows as $subRow) {
                        $concept = array();
                        $concept['uri'] = $subRow['concept2'];
                        $concept['name'] = $subRow['name2'];
                        if(!in_array($concept, $concepts))
                        {
                            $concepts[] = $concept;
                           // $feeds[$row['feed']]['concept'][] = $concepts;
                        }
                        
                    }
                    
                }
 * 
 */
                
                if (isset($feeds[$row['feed']])) {
                    
                    
                    //solution for suquery
                    //$feeds[$row['feed']]['concept'] = $concepts;
                    
                    $concept['uri'] = $row['concept'];
                    $concept['name'] = $row['name'];
                    if(!in_array($concept, $feeds[$row['feed']]['concept']))
                        $feeds[$row['feed']]['concept'][] = $concept;
                } else {
                    $feeds[$row['feed']]['url'] = $row['feed'];
                    $feeds[$row['feed']]['concept'] = array();
                }
                 
                //solution for subquery
                //$feeds[$row['feed']]['url'] = $row['feed'];
                //$feeds[$row['feed']]['concept'] = $concepts;
                
            }
        } else {
            echo '{"response": [{ status: 200, "function":"selectFeedQuery" ,"message":"No data returned"}]}';
            print_r($errs);
        }

        return $feeds;
    }




//disambiguation
private function lookForDBpediaTerm($term) {
        $term = $this->prepareTermNameForDBpedia($term);
        try {
            //http://en.wikipedia.org/w/api.php?action=query&list=search&format=xmlfm&srsearch=IOS
            $query = 'SELECT DISTINCT * WHERE { { { <http://dbpedia.org/resource/' . $term . '_(disambiguation)> <http://dbpedia.org/ontology/wikiPageRedirects> ?y . }
                UNION
                {
                <http://dbpedia.org/resource/' . $term . '_(disambiguation)> <http://dbpedia.org/ontology/wikiPageDisambiguates> ?x . }
                }
                UNION{
                    <http://dbpedia.org/resource/Android> <http://dbpedia.org/ontology/wikiPageRedirects> ?z .
                    }
                    }';

            $searchUrl = "http://dbpedia.org/sparql?query=" . urlencode($query) . "&format=xml";

            $response = $this->sendExternalRequest($searchUrl);

            $xmlobj = new SimpleXMLElement($response);


            $result = array();
            foreach ($xmlobj->results as $obj) {
                $array = (array) $obj;
                if (!key_exists("result", $array)) {
                    return null;
                }
                foreach ($array["result"] as $a) {
                    $child = (string) $a->uri;
                    array_push($result, $child);
                }
            }

            return $result[0];
        } catch (SQLException $oException) {
            echo ("Caught SQLException: " . $oException->sError );
        }
    }

// foearch for categoriesOfCategories
            
            foreach ($xmlobj->results as $obj) {
                $array = (array) $obj;
                if (!key_exists("result", $array)) {
                    return null;
                }
                foreach ($array["result"] as $a) {
                    $child = (string) $a->binding->uri;

                    if ($child == null) {
                        $child = (string) $a->uri;
                    }
                    $in_blacklist = false;

                    foreach ($this->blacklist_topics as $blacklist) {

                        if (strpos($child, $blacklist) != 0 || strpos($child, $blacklist) != null) {

                            $in_blacklist = true;
                            break;
                        }
                    }

                    if (in_array($child, $this->blacklist_topics)) {
                        $in_blacklist = true;
                    }
                    if (!$in_blacklist && !in_array($child, $this->closedList)) {
                        array_push($categoriesArray, $child);
                    }
                }
              
             
            }




       /*
          $googleMeasure1 = (max($a, $b) - $ab) / ($union - min($a, $b));
          $googleMeasure11 = 1-((max($a, $b) - $ab) / ($union - min($a, $b)));

          $googleMeasure2 = (max($a, $b) - $ab) / (29380711 - min($a, $b));
          $googleMeasure = 1 - ((max($a, $b) - $ab) / (29380711 - min($a, $b)));

          $googleMeasure3 = ($union - count($combindedCats)) / $union;

          $googleMeasure31 = 1 - (($union - count($combindedCats)) / $union);
         */
